use core::strings
use core::lists
use core::numbers
use core::quantities

# Helper functions for mixed-unit conversions. See units::mixed for more.

fn _zero_length<A: Dim>(val: A) -> A = val * 0 -> val

fn _mixed_unit_list<D: Dim>(val: D, units: List<D>, acc: List<D>) -> List<D> =
  if val == 0
    then concat(acc, map(_zero_length, units))
    else if len(units) == 1
      then cons_end(val -> head(units), acc)
      else _mixed_unit_list(val - unit_val, tail(units), cons_end(unit_val, acc))
  where unit_val: D =
    if (len(units) > 0)
      then (val |> trunc_in(head(units)))
      else error("Units list cannot be empty")
  
fn _negate<D: Dim>(x: D) = -x

fn _sort_descending<D: Dim>(xs: List<D>) -> List<D> = sort_by_key(_negate, xs)

fn _clean_units<D: Dim>(units: List<D>) -> List<D> = units |> unique() |> _sort_descending()

fn _unit_list<D: Dim>(units: List<D>, value: D) -> List<D> = _mixed_unit_list(value, _clean_units(units), [])
